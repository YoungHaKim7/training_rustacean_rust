Sorts the slice with a comparator function, but might not preserve the order of equal
     elements.
    
     This sort is unstable (i.e., may reorder equal elements), in-place
     (i.e., does not allocate), and *O*(*n* \* log(*n*)) worst-case.
    
     The comparator function must define a total ordering for the elements in the slice. If
     the ordering is not total, the order of the elements is unspecified. An order is a
     total order if it is (for all `a`, `b` and `c`):
    
     * total and antisymmetric: exactly one of `a < b`, `a == b` or `a > b` is true, and
     * transitive, `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.
    
     For example, while [`f64`] doesn't implement [`Ord`] because `NaN != NaN`, we can use
     `partial_cmp` as our sort function when we know the slice doesn't contain a `NaN`.
    
     ```
     let mut floats = [5f64, 4.0, 1.0, 3.0, 2.0];
     floats.sort_unstable_by(|a, b|a.partial_cmp(b).unwrap());
     assert_eq!(floats, [1.0, 2.0, 3.0, 4.0, 5.0]);
     ```
    
     # Current implementation
    
     The current algorithm is based on [pattern-defeating quicksort][pdqsort] by Orson Peters,
     which combines the fast average case of randomized quicksort with the fast worst case of
     heapsort, while achieving linear time on slices with certain patterns. It uses some
     randomization to avoid degenerate cases, but with a fixed seed to always provide
     deterministic behavior.
    
     It is typically faster than stable sorting, except in a few special cases, e.g., when the
     slice consists of several concatenated sorted sequences. 



  Tim sort 알고리즘


  Rust Pattern Defeating Quicksort -> C++